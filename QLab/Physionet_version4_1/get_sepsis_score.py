#!/usr/bin/env python

import numpy as np
from keras.models import load_model

MEAN = [76.22258160944718,84.49933617229627,12.512096739486912,105.71141201254976,72.14023343490965,43.82230158290442,15.85112669677428,1.2237696574561432,-0.03740038396866403,1.0086137507167217,0.04624161679155498,0.5113831698030391,2.280766326721245,3.197151770701126,4.221854968077773,1.6419311175678548,1.6467133957389786,0.4446800690628072,4.804291622911848,0.09208569072483799,0.003537002080904048,23.42319153336211,0.07066938107601459,0.12945516392755974,0.1422549461735195,0.38505561747443917,0.03151728825352269,0.07894290076729042,2.7265155037011706,0.770050160738553,1.2138978037765478,0.7333483484837825,1.896266871106358,11.644201944324543,62.00946887985146,0.5592690422043409,0.3007975724934126,0.3049516495834971,-56.12483250337568,26.994992301299437,0.01798467990800214]
STD = [30.126970692545143,32.866190040452274,17.501740423116075,48.661766965263126,31.20818684411058,31.78877221374879,8.220619519487087,6.4173782444418395,1.0119662577179807,4.905913507811212,3.214817608789488,1.8741231373675715,9.65061290525726,17.03238822113705,113.84721754816378,8.001126754569176,19.947283990573276,1.8738419574265692,22.066196825410238,0.573898803801827,0.1809968067109401,55.75932336451067,0.5936677205399447,0.5087269150547208,0.751834489041207,1.217594067417765,0.5854514408250523,2.5509833247226052,8.89927125718599,2.7794613658399046,8.295385861832564,3.4184241395213215,26.378320704784983,52.77176919573174,16.386217886852187,0.4964749131960783,0.45860498075086203,0.4603870953326563,162.25653881629827,29.005419123285087,0.13289560781025025]
X_cols = 40
max_len = 32

def zscore(data):
    mean_mat = np.matmul(np.ones((len(data),1)), np.array(MEAN[0:-1])[np.newaxis,:])
    std_mat = np.matmul(np.ones((len(data),1)), np.array(STD[0:-1])[np.newaxis,:])            
    return (data - mean_mat) / std_mat
	
def get_sepsis_score(data, model):
    data[np.isnan(data)] = 0
    sample_len = len(data)
    X_mats = np.zeros((1, max_len, X_cols), dtype = float)
    if sample_len <= max_len:
        X_mats[0][0:sample_len, :] = zscore(data)
    else:
        X_mats[0] = zscore(data[sample_len-max_len:, :])
    results = np.argmax(model.predict(X_mats), axis = 2)
    result = results[0]
    result_len = len(result)
    if sample_len <= result_len:
        label = result[sample_len-1]
    else:
        label = result[-1]
    score = label
    return score, label

def load_sepsis_model():
    model = load_model('model.h5')
    return model
